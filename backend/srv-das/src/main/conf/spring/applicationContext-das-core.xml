<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
           http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">

	<!-- Spring to put transactional advice on any class or method that has
		an @Transactional annotation on it -->
	<tx:annotation-driven />

	<!-- setup datasource -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">

		<property name="driverClass">
			<value>${hibernate.connection.driver_class}</value>
		</property>
		<property name="jdbcUrl">
			<value>${hibernate.connection.url}</value>
		</property>
		<property name="user">
			<value>${hibernate.connection.username}</value>
		</property>
		<property name="password">
			<value>${hibernate.connection.password}</value>
		</property>

		<property name="initialPoolSize">
			<value>${hibernate.initialPoolSize}</value>
		</property>
		<property name="minPoolSize">
			<value>${hibernate.minPoolSize}</value>
		</property>
		<property name="maxPoolSize">
			<value>${hibernate.maxPoolSize}</value>
		</property>
		<property name="idleConnectionTestPeriod">
			<value>${hibernate.idleConnectionTestPeriod}</value>
		</property>
		<property name="acquireIncrement">
			<value>${hibernate.acquireIncrement}</value>
		</property>
		<property name="maxStatements">
			<value>${hibernate.maxStatements}</value>
		</property>
		<property name="numHelperThreads">
			<value>${hibernate.numHelperThreads}</value>
		</property>
	</bean>

	<!-- setup entity manager factory-->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="persistenceUnitName" value="com.zebra.das" />
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.connection.pool_size">${hibernate.connection.pool_size}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.bytecode.use_reflection_optimizer">true</prop>
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
                                    <prop key="hibernate.hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.DefaultNamingStrategy</prop>
				<!-- for auditing purposes -->
				<!--<prop key="hibernate.ejb.interceptor">com.zebra.das.interceptor.EntityInterceptor</prop>-->
			</props>
		</property>
	</bean>

	<!-- setup transaction manager -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- Needed for processing @PersistenceContext but since <context:annotation-config>
		is defined in applicationContext-das-services.xml the following bean is automatically
		created -->
	<!--bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" /-->

	<!-- If we enable this bean, then jpa exceptions will be wrapped by Spring's DataAccessException hierarchy -->
	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

	<!-- spring-data config for repositories -->
        <tx:annotation-driven transaction-manager="transactionManager" />
	<jpa:repositories base-package="com.zebra.das.repository"
		entity-manager-factory-ref="entityManagerFactory"
		transaction-manager-ref="transactionManager" />
</beans>